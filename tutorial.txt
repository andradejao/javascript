Aula 1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Na linguagem JS o ; (ponto e vírgula) é opcional.
Pode-se utilizar "" ou '' só não pode combiná-los.
Dica: "" para textos e '' para importações.

Nas estruturas de controle condicional e nos laços de repetições pode-se omitir as chaves, porém só uma linha de código será vinculada.

Variáveis na linguagem JS são dinamicamente tipadas e somente 3 tipos: (string, number e boolean) 
Para declarar uma constante ou variável podemos usar: const, var, let
var É OBSOLETO (!NÃO UTILIZAR!)

Sintaxe JS:
    console.log // printar no terminal
    console.clear() // limpar o terminal

Strings:
    .replace (",",".") // substitui um caractere por outro

Concatenação // unir texto com conteúdo de variáveis:
    + // Evitar o uso devido a tipagem dinâmica
    `${}` // Mais usado na linguagem JS

Numbers:
Number // converte para o tipo numérico
Number.isInteger // Verifica se o número é inteiro
.toFixed(x) // Formatar número de acordo com a quantidade de casas decimais

Booleans:
Só admitem dois valores // true e false

Aula 2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Operadores Aritméticos
ATENÇÃO à regra de precedência:
1º) Parênteses
2º) Multiplicação
3º) Divisão
4º) Soma
5º) Subtração

Comparadores:
Observação importante:
NÃO usar os comparadores == != (riscos devido a tipagem dinâmica)

---------------------------
NPM (Node Package Manager)
Gerenciador de pacotes node (pacotes com funcionalidade que podem ser adicionadas ao node)
Para gerenciar (versão, atualizações, etc.) os pacotes node, é necessário configurar o package.json

json(JavaScript Object Notation)
npm -versiom
npm ls // listar pacotes instalados
npm i // instalar um pacote
npm r // remover um pacotes

Observação: os pacotes são instalados no projeto(raíz)

Passo 1 - Criar o arquivo package.json
npm init

Repositório de Pacotes: https://www.npmjs.com/

-----------------
Exercício:
Criar no console JS um app para calcular a porcentagem, usando regra de 3, conforme modelo:
10% de 200 = 20
x       Y    valor

Variáveis: 3 variáveis = x y valor
Entrada: x , y
Processamento: valor = (x * y) / 100
Saída: valor
-----------------
Funções:
Função é um bloco de código reutilizável
Função Simples:

function nome() {
    
}

Aula 3 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Função é um bloco de código reutilizável

Função Simples:
function nome() {
}

Função com Retorno:
function nome() {
    return
}

Função Anônima:
const nome = function() {

}

let nome = function() {
    
}

Funções em JavaScript moderno podem ser simplificadas

___________________________________________________________
obs:
typeof // Verifica a tipagem dinâmica
primitivos (string, number, boolean)
function
object

Aula 4 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

POO - Programação Orientada a Objetos

Pilares:
- Abstração
- Herança
- Polimorfismo
- Encapsulamento (Segurança)

ATENÇÃO!
Toda classe modelo inicia com letra maiúscula

IMPORTANTE!!!
new  // indica a criação de um objeto
this  // quando se refere a ele mesmo
super // indica o uso de atributos da classe pai

polimorfismo // é a mudança de comportamento de um método já existente
*** ATENÇÃO! o Polimorfismo não cria outro método, apenas modifica o comportamento do método existente.
Obrigatório usar o mesmo nome de método da classe pai ***

Dica:
Class Classe {} // cria uma classe modelo
- O nome da classe sempre deve começar com uma letra maiúscula
- Classe (biologia)
- objeto (new) (substantivo)
- atributos (variáveis) (adjetivos)
- ações (métodos/funções) (verbos)

Encapsulamento
1º) Proteger a variável criando um modificador privado (Acesso exclusivo da classe ao qual pertence)
2º) Criar uma função para obter o conteúdo da variável (get)
3º) Criar uma função para gravar um dado na variável (set)

No Js utiliza-se _ antes da variável para encapsular

Aula 5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

No Js objetos podem ser criados sem uma classe modelo
Estrutura de dados usando objetos
Exemplos:
- package.json
- coleção do banco de dados (MongoDB)

ATENÇÃO!!!
Tipos de Js
- string
- number
- boolean
- function
- object

Aula 6 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Array (vetor)
Array Multidimensional (Matriz)
- É uma forma de trabalhar com variáveis
- Índice [0],[1]...
- Em JS array é um objeto

ATENÇÃO!!!
Cuidado ao manipular os dados e alterar o índice do array
Mais seguro:
push() // Adiciona dado ao final do array
pop() // Exclui o último dado do array
delete // Exclui um dado específico sem alterar a ordem do índice

Percorrendo um array
1º) for, forEach
2º) map() // percorre um array, faz algo e gera outro array com o resultado

Um array tamnbém pode ser criado como um objeto
let nome = []
let nome = new Array()

Um array pode ser criado como uma estrutura de dados, junto com objetos
e podem ser usados filtros para manipulação de dados

ATENÇÃO!!!
Sempre criar uma cópia do array original para exibição
__________________________________________________________________________
DOM - documment object model
É uma técnica para identificar elementos HTML (tags) que serão manipulados pelo CSS ou JS
É uma forma de trabalhar objetos em HTML
A técnica consiste em atribuir um id ao elemento


setTimeout(()=>{},1000) // Usado para executar uma função infinitamente a cada determinado tempo (milisegundos)

O JS é capaz de adicionar ou remover uma classe CSS ao documento HTML 
______________________________________________________________________________

Aula 7 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Plataforma node
obs: Ao clonar um repositório ou trabalhar em outro pc, é necessário instalar as 
bibliotecas presentes nas dependências do package.json

npm install (digitar na raiz do projeto)
__________________________________________________________________________
Assincronismo: 
Métodos e funções que permitem ao JS trabalhar multitarefas
- Banco de dados
- Acesso a URLs (serviços de nuvem, web services, APIs, etc)
- Acesso ao disco de armazenamento do equipamento

Promise ("promessa)
1º) A resposta à requisição pode ou não dar certo
2º) A resposta pode ter um delay

Sintaxe:
    return new Promise((resolve, reject) => {})
- resolve // OK
- reject // ERRO

- Quando utilizar promises, deve-se usar a estrutura abaixo para obter o resultado do retorno da função
    .then(() => {})
    .catch(() => {})

obs: é possível usar mais de um .then para trabalhar diferentes tipos de resposta 

async - await
(Forma mais moderna e simples de trabalhar assincronismo)

Para trabalhar com async e await devemos usar funções, sendo
que ao usar o async é obrigatório o uso do await

Neste caso usamos dentro da função o try catch para tratamento de exceções
try {

} catch (error) {

}
